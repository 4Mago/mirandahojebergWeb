{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/magimug/Desktop/snakeweb/src/store/Project.context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext } from 'react';\nimport sanityClient from '../Client';\nexport const ProjectContext = /*#__PURE__*/createContext();\n\nconst ProjectContextProvider = props => {\n  _s();\n\n  const [project, setProject] = useState('');\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    const projectQuery = `*[_type == \"client\"] | order(date desc)`;\n    sanityClient.fetch(projectQuery).then(project => {\n      const projectArray = [];\n      project.forEach(project => {\n        projectArray.push(project);\n      });\n      setProject(projectArray);\n      setLoaded(true);\n    });\n    return;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ProjectContext.Provider, {\n    value: {\n      project\n    },\n    children: loaded ? props.children : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ProjectContextProvider, \"lwx6M1lGPC6r+6apIMX0LtNNRPQ=\");\n\n_c = ProjectContextProvider;\nexport default ProjectContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectContextProvider\");","map":{"version":3,"sources":["/Users/magimug/Desktop/snakeweb/src/store/Project.context.jsx"],"names":["React","useState","useEffect","createContext","sanityClient","ProjectContext","ProjectContextProvider","props","project","setProject","loaded","setLoaded","projectQuery","fetch","then","projectArray","forEach","push","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,OAAOC,YAAP,MAAyB,WAAzB;AAEA,OAAO,MAAMC,cAAc,gBAAGF,aAAa,EAApC;;AAEP,MAAMG,sBAAsB,GAAGC,KAAK,IAAI;AAAA;;AACvC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMU,YAAY,GAAI,yCAAtB;AACAR,IAAAA,YAAY,CAACS,KAAb,CAAmBD,YAAnB,EAAiCE,IAAjC,CAAsCN,OAAO,IAAI;AAChD,YAAMO,YAAY,GAAG,EAArB;AACAP,MAAAA,OAAO,CAACQ,OAAR,CAAgBR,OAAO,IAAI;AAC1BO,QAAAA,YAAY,CAACE,IAAb,CAAkBT,OAAlB;AACA,OAFD;AAGAC,MAAAA,UAAU,CAACM,YAAD,CAAV;AACAJ,MAAAA,SAAS,CAAC,IAAD,CAAT;AACA,KAPD;AAQA;AACA,GAXQ,EAWN,EAXM,CAAT;AAYA,sBACC,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEH,MAAAA;AAAF,KAAhC;AAAA,cACEE,MAAM,GAAGH,KAAK,CAACW,QAAT,GAAoB;AAD5B;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CApBD;;GAAMZ,sB;;KAAAA,sB;AAsBN,eAAeA,sBAAf","sourcesContent":["import React, { useState, useEffect, createContext } from 'react'\nimport sanityClient from '../Client'\n\nexport const ProjectContext = createContext()\n\nconst ProjectContextProvider = props => {\n\tconst [project, setProject] = useState('')\n\tconst [loaded, setLoaded] = useState(false)\n\tuseEffect(() => {\n\t\tconst projectQuery = `*[_type == \"client\"] | order(date desc)`\n\t\tsanityClient.fetch(projectQuery).then(project => {\n\t\t\tconst projectArray = []\n\t\t\tproject.forEach(project => {\n\t\t\t\tprojectArray.push(project)\n\t\t\t})\n\t\t\tsetProject(projectArray)\n\t\t\tsetLoaded(true)\n\t\t})\n\t\treturn\n\t}, [])\n\treturn (\n\t\t<ProjectContext.Provider value={{ project }}>\n\t\t\t{loaded ? props.children : null}\n\t\t</ProjectContext.Provider>\n\t)\n}\n\nexport default ProjectContextProvider\n"]},"metadata":{},"sourceType":"module"}